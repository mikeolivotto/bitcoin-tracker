{"version":3,"sources":["components/CurrencySelector.js","components/DataDisplay.js","App.js","index.js"],"names":["CurrencySelector","props","handleCurrencyChange","currency","style","value","onChange","e","target","currencyData","map","index","country","DataDisplay","useState","bitcoinData","setBitcoinData","curr","a","fetch","response","json","data","bpi","useEffect","getCurrency","Chart","defaults","defaultFontColor","defaultFontSize","Row","className","margin","maxWidth","height","labels","Object","keys","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","values","options","plugins","title","display","text","scales","x","y","App","setCurrency","Container","href","rel","newCurrency","console","log","ReactDOM","render","document","getElementById"],"mappings":"2+PAGaA,EAAmB,SAACC,GAC/B,IAAQC,EAAmCD,EAAnCC,qBAAsBC,EAAaF,EAAbE,SAC9B,OACE,sBAAKC,MAAO,CAAC,OAAU,iBAAvB,UACE,mBAAGA,MAAO,CAAC,aAAgB,OAA3B,8BACA,wBACEC,MAAOF,EACPG,SAAU,SAACC,GACTL,EAAqBK,EAAEC,OAAOH,QAHlC,SAMGI,EAAaC,KAAI,WAAwBC,GAAW,IAAhCR,EAA+B,EAA/BA,SAAUS,EAAqB,EAArBA,QAC7B,OACE,wBAAqCP,MAAOF,EAA5C,SACGS,GADH,UAAgBD,EAAhB,YAAyBR,a,wCCZxBU,EAAc,SAACZ,GAC1B,IAAQE,EAAaF,EAAbE,SACR,EAAsCW,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAFoC,4CAIpC,WAA2BC,GAA3B,iBAAAC,EAAA,sEACyBC,MAAM,kEAAD,OACwCF,IAFtE,cACQG,EADR,gBAIqBA,EAASC,OAJ9B,OAIQC,EAJR,OAMEN,EAAeM,EAAKC,KANtB,4CAJoC,sBAgFpC,OApEAC,qBAAU,YAZ0B,oCAalCC,CAAYtB,KAKX,CAACA,IAEJuB,IAAMC,SAASC,iBAAmB,OAClCF,IAAMC,SAASE,gBAAkB,GA4D/B,qCACE,6CAAgB1B,KAChB,cAAC2B,EAAA,EAAD,CAAKC,UAAU,4BAAf,SACE,qBAAK3B,MAAO,CAAE4B,OAAQ,OAAQC,SAAU,UAAxC,SACE,cAAC,IAAD,CAAMC,OAAQ,IAAKZ,KA5DlB,CAELa,OAAQC,OAAOC,KAAKtB,GACpBuB,SAAU,CACR,CACEC,MAAO,UACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAEhBlC,KAAMc,OAAOqB,OAAO1C,MAoCwB2C,QA7B3C,CACLC,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAK,cAAD,OAAgB3D,KAGxB4D,OAAQ,CACNC,EAAG,CACDJ,MAAO,CACLC,SAAS,EACTC,KAAM,SAGVG,EAAG,CACDL,MAAO,CACLC,SAAS,EACTC,KAAM3D,gB,QC9CH+D,EAvBH,WAEV,MAAgCpD,mBAAS,OAAzC,mBAAOX,EAAP,KAAiBgE,EAAjB,KAOA,OACE,cAACC,EAAA,EAAD,UACE,cAACtC,EAAA,EAAD,CAAKC,UAAU,yBAAf,SACE,sBAAK3B,MAAO,CAAE4B,OAAQ,OAAQC,SAAU,UAAxC,UACQ,oBAAIF,UAAU,YAAd,mCACA,+CAAiB,mBAAGsC,KAAK,yCAAyC7D,OAAO,SAAS8D,IAAI,aAArE,yBACjB,cAAC,EAAD,CAAkBnE,SAAUA,EAAUD,qBAXpD,SAA8BqE,GAC5BC,QAAQC,IAAI,qBAAsBF,GAClCJ,EAAYI,MAUA,cAAC,EAAD,CAAapE,SAAUA,YCpBvCuE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d0d4b2ec.chunk.js","sourcesContent":["import React from \"react\";\nimport currencyData from \"../data/currency-data.json\";\n\nexport const CurrencySelector = (props) => {\n  const { handleCurrencyChange, currency } = props;\n  return (\n    <div style={{\"margin\": \"20px 0 20px 0\"}}>\n      <p style={{\"marginBottom\": \"0px\"}}>Select Currency:</p>\n      <select\n        value={currency}\n        onChange={(e) => {\n          handleCurrencyChange(e.target.value);\n        }}\n      >\n        {currencyData.map(({ currency, country }, index) => {\n          return (\n            <option key={`${index}-${currency}`} value={currency}>\n              {country}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Line, Chart } from \"react-chartjs-2\";\nimport Row from 'react-bootstrap/Row'\n\nexport const DataDisplay = (props) => {\n  const { currency } = props;\n  const [bitcoinData, setBitcoinData] = useState({});\n  // fetching data is a side effect of our app's state changing/being set\n  async function getCurrency(curr) {\n    const response = await fetch(\n      `https://api.coindesk.com/v1/bpi/historical/close.json?currency=${curr}`\n    );\n    const data = await response.json();\n    //set the state\n    setBitcoinData(data.bpi);\n  }\n  useEffect(() => {\n    getCurrency(currency);\n    // fetch(`https://api.coindesk.com/v1/bpi/historical/close.json?currency=${currency}`)\n    //     .then(response => response.json())\n    //     .then(data => setBitcoinData(data.bpi))\n    //     .catch(error => console.log(error))\n  }, [currency]);\n\n  Chart.defaults.defaultFontColor = \"#000\";\n  Chart.defaults.defaultFontSize = 16;\n\n  function formatChartData() {\n    // sets up large config object for Line Chart\n    return {\n      // Takes the keys from the 'bitcoinData' object in state\n      labels: Object.keys(bitcoinData), // eg [\"2021-10-10\", \"2021-10-11\"]\n      datasets: [\n        {\n          label: \"Bitcoin\",\n          fill: true,\n          lineTension: 0.4,\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          // Takes the keys from the 'bitcoinData' object in state\n          data: Object.values(bitcoinData), // eg [500242, 450252, 3252023]\n        },\n      ],\n    };\n  }\n\n  function chartLabels() {\n    return {\n      plugins: {\n        title: {\n          display: false, \n          text: `Bitcoin in ${currency}`\n        }\n      },\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: \"Date\"\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: currency\n          }\n        }\n      }\n    }\n  }\n\n  return (\n    <>\n      <h3>Bitcoin in {currency}</h3>\n      <Row className=\"justify-content-md-center\">\n        <div style={{ margin: \"1rem\", maxWidth: \"1000px\" }}>\n          <Line height={150} data={formatChartData()} options={chartLabels()} />\n        </div>\n      </Row>\n    </>\n  );\n};\n","import React, { useState } from 'react'\nimport { CurrencySelector } from './components/CurrencySelector';\nimport { DataDisplay } from './components/DataDisplay';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col';\n \n\nconst App = () => {\n  \n  const [currency, setCurrency] = useState(\"AUD\");\n\n  function handleCurrencyChange(newCurrency) {\n    console.log(\"Got new currency: \", newCurrency);\n    setCurrency(newCurrency);\n  }\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <div style={{ margin: \"1rem\", maxWidth: \"1000px\" }}>\n                <h1 className=\"display-1\">Bitcoin Price Tracker</h1>\n                <span>Powered by <a href='https://www.coindesk.com/price/bitcoin' target=\"_blank\" rel=\"noreferrer\">CoinDesk</a></span>\n                <CurrencySelector currency={currency} handleCurrencyChange={handleCurrencyChange} />\n                <DataDisplay currency={currency} />\n        </div>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}