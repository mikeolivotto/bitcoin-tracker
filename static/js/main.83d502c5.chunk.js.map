{"version":3,"sources":["components/CurrencySelector.js","components/DataDisplay.js","App.js","index.js"],"names":["CurrencySelector","props","handleCurrencyChange","currency","value","onChange","e","target","currencyData","map","index","country","DataDisplay","useState","bitcoinData","setBitcoinData","curr","a","fetch","response","json","data","bpi","useEffect","getCurrency","Chart","defaults","defaultFontColor","defaultFontSize","style","margin","maxWidth","height","labels","Object","keys","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","values","App","setCurrency","href","rel","newCurrency","console","log","ReactDOM","render","document","getElementById"],"mappings":"2LAKaA,EAAoB,SAACC,GAAW,IAElCC,EAAkCD,EAAlCC,qBAAsBC,EAAYF,EAAZE,SAC/B,OACI,qCACD,kDACA,wBAAQC,MAAOD,EAAUE,SAAU,SAACC,GAAOJ,EAAqBI,EAAEC,OAAOH,QAAzE,SACKI,EAAaC,KAAI,WAAsBC,GAAW,IAA/BP,EAA8B,EAA9BA,SAAUQ,EAAoB,EAApBA,QAC7B,OAAQ,wBAENP,MAAOD,EAFD,SAGLQ,GAHK,UACED,EADF,YACWP,a,iCCVhBS,EAAc,SAACX,GAAW,IAC5BE,EAAYF,EAAZE,SAD2B,EAEIU,mBAAS,IAFb,mBAE3BC,EAF2B,KAEdC,EAFc,iDAIlC,WAA2BC,GAA3B,iBAAAC,EAAA,sEAC2BC,MAAM,kEAAD,OAAmEF,IADnG,cACUG,EADV,gBAEuBA,EAASC,OAFhC,OAEUC,EAFV,OAGIN,EAAeM,EAAKC,KAHxB,4CAJkC,sBAmDpC,OA1CEC,qBAAU,YATwB,oCAW9BC,CAAYrB,KAKb,CAACA,IAEJsB,IAAMC,SAASC,iBAAmB,OACjCF,IAAMC,SAASE,gBAAkB,GAiChC,qCACF,kDAAqBzB,KACrB,8BACA,qBAAK0B,MAAO,CAACC,OAAO,OAAQC,SAAU,UAAtC,SACE,cAAC,IAAD,CAAMC,OAAQ,IAAKX,KAjCZ,CACLY,OAAQC,OAAOC,KAAKrB,GACpBsB,SAAU,CACR,CACEC,MAAO,UACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBjC,KAAMa,OAAOqB,OAAOzC,gBCzBjB0C,EAnBH,WAAO,IAAD,EAEgB3C,mBAAS,OAFzB,mBAETV,EAFS,KAECsD,EAFD,KAShB,OACE,gCACM,+CACA,+CAAiB,mBAAGC,KAAK,yCAAyCnD,OAAO,SAASoD,IAAI,aAArE,yBACjB,cAAC,EAAD,CAAkBxD,SAAUA,EAAUD,qBAT9C,SAA8B0D,GAC5BC,QAAQC,IAAI,qBAAsBF,GAClCH,EAAYG,MAQN,cAAC,EAAD,CAAazD,SAAUA,QCfjC4D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.83d502c5.chunk.js","sourcesContent":["import React from 'react'\nimport currencyData from '../data/currency-data.json'\n\n\n\nexport const CurrencySelector  = (props) => {\n    \n    const {handleCurrencyChange, currency} = props\n  return(\n      <>\n     <h2>Select Currency:</h2>\n     <select value={currency} onChange={(e) => {handleCurrencyChange(e.target.value)}}>\n         {currencyData.map(({currency, country}, index) => {\n          return (<option \n            key={`${index}-${currency}`} \n            value={currency}>\n            {country}</option>\n            )\n         })}\n     </select>\n     </>\n   )\n\n }","import React, { useEffect, useState } from 'react'\nimport {Line, Chart} from 'react-chartjs-2'\n\n\nexport const DataDisplay = (props) => {\n    const {currency} = props;\n    const [bitcoinData, setBitcoinData] = useState({});\n    // fetching data is a side effect of our app's state changing/being set\n    async function getCurrency(curr) {\n        const response = await fetch(`https://api.coindesk.com/v1/bpi/historical/close.json?currency=${curr}`)\n        const data = await response.json()\n        setBitcoinData(data.bpi)\n    }\n    useEffect(() => {\n       \n        getCurrency(currency);\n        // fetch(`https://api.coindesk.com/v1/bpi/historical/close.json?currency=${currency}`)\n        //     .then(response => response.json())\n        //     .then(data => setBitcoinData(data.bpi))\n        //     .catch(error => console.log(error))\n    }, [currency]);\n\n    Chart.defaults.defaultFontColor = \"#000\";\n     Chart.defaults.defaultFontSize = 16;\n\n    function formatChartData() {\n      // sets up large config object for Line Chart\n      return {\n        labels: Object.keys(bitcoinData), // eg [\"2021-10-10\", \"2021-10-11\"]\n        datasets: [\n          {\n            label: \"Bitcoin\",\n            fill: true,\n            lineTension: 0.4,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: Object.values(bitcoinData) // eg [500242, 450252, 3252023]\n          }\n        ]\n      }\n    }\n\n  return(\n      <>\n    <h3>Bitcoin data in {currency}</h3>\n    <div>\n    <div style={{margin:'1rem', maxWidth: \"1000px\"}}>\n      <Line height={150} data={formatChartData()} />\n      </div>\n    </div>\n    </>\n\n   )\n\n }","import React, { useState } from 'react'\nimport { CurrencySelector } from './components/CurrencySelector';\nimport { DataDisplay } from './components/DataDisplay';\n \n\nconst App = () => {\n  \n  const [currency, setCurrency] = useState(\"AUD\");\n\n  function handleCurrencyChange(newCurrency) {\n    console.log(\"Got new currency: \", newCurrency);\n    setCurrency(newCurrency);\n  }\n\n  return (\n    <div >\n          <h1>Bitcoin Index</h1>\n          <span>Powered by <a href='https://www.coindesk.com/price/bitcoin' target=\"_blank\" rel=\"noreferrer\">CoinDesk</a></span>\n          <CurrencySelector currency={currency} handleCurrencyChange={handleCurrencyChange} />\n          <DataDisplay currency={currency} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}